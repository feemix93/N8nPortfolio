{
  "name": "My workflow 2",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "seconds",
              "secondsInterval": 1
            }
          ]
        }
      },
      "id": "9853e7fb-4b72-46bf-9013-7384d3618437",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -2700,
        620
      ]
    },
    {
      "parameters": {
        "url": "https://api.helcim.com/v2/invoices/",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            },
            {
              "name": "api-token",
              "value": "H"
            }
          ]
        },
        "options": {}
      },
      "id": "486851ed-9b77-4bda-a645-b3fba416b08c",
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2500,
        620
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "690042c7-19b0-40f4-90d9-e26a77bf6c31",
              "leftValue": "={{ $json.status }}",
              "rightValue": "=PAID",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "e5c263c9-a2df-44b1-afc1-0c78566f3d13",
      "name": "If1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -2280,
        640
      ]
    },
    {
      "parameters": {
        "jsCode": "const existingInvoices = $('MongoDB1').all()\nconst newInvoices=$('If1').all().filter(invoice=>{\nconst exists = existingInvoices.some(existingInvoice=>{\nconsole.log(invoice,\"test\")\nreturn existingInvoice.json.invoiceId===invoice.json.invoiceId;})\nreturn !exists;})\n\nreturn newInvoices;"
      },
      "id": "ea931042-bfd1-48f9-848e-a960ee57f9c1",
      "name": "Code1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1820,
        640
      ]
    },
    {
      "parameters": {
        "collection": "helcim_invoices",
        "options": {},
        "query": "={ }\n"
      },
      "id": "249e9fd5-9067-47de-944f-3965c55ba81e",
      "name": "MongoDB1",
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1,
      "position": [
        -2020,
        620
      ],
      "alwaysOutputData": true,
      "credentials": {
        "mongoDb": {
          "id": "7x0oFBHRQWZQNq3k",
          "name": "MongoDB account"
        }
      }
    },
    {
      "parameters": {
        "operation": "insert",
        "collection": "helcim_invoices",
        "fields": "invoiceId",
        "options": {}
      },
      "id": "303fe8b4-52ad-4391-b069-84e83f13e1ad",
      "name": "MongoDB2",
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1,
      "position": [
        -1660,
        640
      ],
      "credentials": {
        "mongoDb": {
          "id": "7x0oFBHRQWZQNq3k",
          "name": "MongoDB account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://quickstart-2d276016.myshopify.com/admin/api/2024-04/orders.json",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-Shopify-Access-Token",
              "value": "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"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\"order\":{\n    \"inventory_behaviour\": \"decrement_obeying_policy\",\n    \"line_items\":[{\n        \"variant_id\":\"{{ $json.variantId }}\",\"title\":\"{{ $json }}\",\"sku\":\"{{ $json.sku }}\",\"price\":{{ $json.price }},\"grams\":\"1300\",\n        \"quantity\":{{ $json.quantity }},\"tax_lines\":[{\"price\":13.5,\"rate\":0.06,\"title\":\"State tax\"}]}],\"transactions\":[{\"kind\":\"sale\",\"status\":\"success\",\"amount\":{{ $json.total }}}],\"total_tax\":{{ $json.taxAmount }},\"currency\":\"USD\",\n         \"customer\": {\n            \"email\": \"faheemuurehman@gmail.com\"\n        },\n        \"contact_email\": \"faheemuurehman@gmail.com\", \n\"note\": \"Sold through Helcim\"}\n} ",
        "options": {}
      },
      "id": "a1c501b1-6a8e-4058-80fa-a2f02ee395c3",
      "name": "HTTP Request2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1040,
        660
      ]
    },
    {
      "parameters": {
        "url": "=https://api.helcim.com/v2/invoices/{{ $json.invoiceIds }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            },
            {
              "name": "api-token",
              "value": "H"
            }
          ]
        },
        "options": {}
      },
      "id": "264230b6-2127-4856-86b0-ad06cc81fce8",
      "name": "HTTP Request1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1120,
        720
      ]
    },
    {
      "parameters": {
        "url": "https://quickstart-2d276016.myshopify.com/admin/api/2023-04/products.json",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "limit",
              "value": "50"
            },
            {
              "name": "page_info",
              "value": "={{ $json.page_info }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-Shopify-Access-Token",
              "value": ""
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "id": "9520e408-2b8c-4b03-af65-83d6b1f4221d",
      "name": "HTTP Request3",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -760,
        640
      ]
    },
    {
      "parameters": {
        "jsCode": "let linkHeader =$input.last().json.headers.link \n\nlet pageInfo = null;\n\nif (linkHeader) {\n  const links = linkHeader.split(',');\n  for (const link of links) {\n    const [urlPart, relPart] = link.split(';');\n    const rel = relPart.match(/rel=\"(.+)\"/)[1];\n    if (rel === 'next') {\n      const pageInfoMatch = urlPart.match(/page_info=([^&>]+)/);\n      pageInfo = pageInfoMatch ? pageInfoMatch[1] : null;\n      break;\n    }\n  }\n}\n\nreturn {\n  json: {\n    page_info: pageInfo\n  }\n};\n"
      },
      "id": "d2b5e0fc-7bb0-4056-9753-4d165f91dbd6",
      "name": "Code2",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -280,
        720
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "dc641b7f-492a-47ed-b3fd-3060c109ddf7",
              "name": "page_info",
              "value": "={{ $json.page_info }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "15a82693-35dc-46dd-ab6b-243d056682fa",
      "name": "Edit Fields",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        0,
        760
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "489c3e50-adcd-4031-a581-92d6e23a3fb9",
              "leftValue": "={{ $json.page_info }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "9f8cc8e3-242f-4c9d-9c9f-b3f0426892c4",
      "name": "If2",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        220,
        760
      ]
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nvar variantIds=[];\nconst lineItems = $('Code3').all()[0].json.lineItems;\nfor (const item of $input.all()) {\n  item.json.body.products.forEach((product)=>{\nproduct.variants.forEach((variant)=>{\n  const matchingProduct = lineItems.find((lineItemProduct)=>\nlineItemProduct.sku===variant.sku\n)\nif (matchingProduct) {\nvariantIds.push({variantId:variant.id,...matchingProduct});\n  \n}\n})\n})\n}\nif (variantIds.length === 0) {\n  return []; // Return an empty array to indicate no matches found\n}\n\nreturn {\n  json: {\n    products: variantIds\n  }\n}"
      },
      "id": "da4e0643-f40e-41db-9093-aa2194c38cbf",
      "name": "Code",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        380,
        540
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "8c313bba-88ae-49ea-be11-471a386dd139",
              "leftValue": "={{ $json.variantId }}",
              "rightValue": "",
              "operator": {
                "type": "number",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "8c11381c-5e56-4c84-b867-4e0eb9f3ad96",
      "name": "If",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        800,
        680
      ]
    },
    {
      "parameters": {
        "jsCode": "var lineItems=[];\nfor (const item of $input.all()) {\n item.json.lineItems.forEach((line)=>{\nif(line){\nlineItems.push(line)}\n})\n}\n\nreturn {\njson:{\nlineItems:lineItems}}"
      },
      "id": "fbaf286c-86e3-424c-9f4d-49e57a02ed85",
      "name": "Code3",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -980,
        640
      ]
    },
    {
      "parameters": {
        "content": "Find new invoices and save them in db , next fetch detail for each invoice using invoice id"
      },
      "id": "da64a5cf-eef9-43fa-b856-5210cb0a5f5c",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1720,
        840
      ]
    },
    {
      "parameters": {
        "jsCode": "var invoiceIds = []\nfor (const item of $input.all()) {\ninvoiceIds.push(item.json.invoiceId);\n}\n\nreturn {\njson:{\ninvoiceIds:invoiceIds}}"
      },
      "id": "29ed2ed2-a48f-48e0-89a4-9492292aeae6",
      "name": "Code4",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1500,
        640
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "invoiceIds",
        "options": {}
      },
      "id": "195bbbdf-bb25-4d08-a6a8-5b1ed56c08c5",
      "name": "Split Out",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -1300,
        720
      ]
    },
    {
      "parameters": {
        "content": "Get skus from invoices to get variant ids to create order in shopify\nsince variant id is required to manage inventory"
      },
      "id": "3bf6513c-3459-4420-9a9d-1fb3f1c7f7e8",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1020,
        880
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "products",
        "options": {}
      },
      "id": "f1cc89b0-036c-467b-a81f-2b0d7a866bb5",
      "name": "Split Out1",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        560,
        680
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "MongoDB1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "MongoDB2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MongoDB1": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MongoDB2": {
      "main": [
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request3": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          },
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "HTTP Request3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Split Out1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "HTTP Request3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out1": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "2b4aa7d2-b205-419a-bb5c-74ae1de19caf",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "c65600125d8a759efc8e20ca898a2b9db31191da64ddfdecc0880001870277cd"
  },
  "id": "zCzm2aW9Gb4AJlYo",
  "tags": []
}
